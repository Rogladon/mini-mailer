import ExcelJS from 'exceljs';
import path from 'node:path';
import { app } from 'electron';

const parseStatus = (status: string, error?: string) => {
  switch (status) {
    case 'OK':
      return '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ';
    case 'FAIL':
      return `–û—à–∏–±–∫–∞: ${error ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`;
    case 'VALID':
      return '–¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞';
    default:
      return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å';
  }
};

const formatDateForFileName = () => {
  const now = new Date();
  const year = now.getFullYear();
  const month = String(now.getMonth() + 1).padStart(2, '0');
  const day = String(now.getDate()).padStart(2, '0');
  const hours = String(now.getHours()).padStart(2, '0');
  const minutes = String(now.getMinutes()).padStart(2, '0');
  return `${year}${month}${day}_${hours}${minutes}`;
};

export async function generateReport(report: any[]) {
  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–Ω–∏–≥—É –∏ –ª–∏—Å—Ç
  const workbook = new ExcelJS.Workbook();
  const sheet = workbook.addWorksheet('–û—Ç—á–µ—Ç');

  // –ó–∞–¥–∞–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫
  sheet.columns = [
    { header: '–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è', key: 'organization', width: 30 },
    { header: '–î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏', key: 'date', width: 20 },
    { header: 'Email', key: 'email', width: 25 },
    { header: '–ö–æ–Ω—Ç–∞–∫—Ç—ã', key: 'contacts', width: 30 },
    { header: '–°—Ç–∞—Ç—É—Å', key: 'status', width: 35 },
  ];

  // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –∫ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º
  const headerRow = sheet.getRow(1);
  headerRow.font = { bold: true };
  headerRow.alignment = { vertical: 'middle', horizontal: 'center' };
  headerRow.border = {
    top: { style: 'thin' },
    left: { style: 'thin' },
    bottom: { style: 'thin' },
    right: { style: 'thin' },
  };
  headerRow.height = 25;

  const calculateRowHeight = (text: string, columnWidth: number) => {
    const maxWidth = columnWidth; // —É–º–Ω–æ–∂–∞–µ–º –Ω–∞ 1.2 –¥–ª—è —É—á–µ—Ç–∞ —à–∏—Ä–∏–Ω—ã —Å–∏–º–≤–æ–ª–æ–≤
    const lines = text.split('\n');
    let lineCount = 0;

    lines.forEach((line) => {
      lineCount += Math.ceil(line.length / maxWidth);
    });

    return Math.max(lineCount, 1) * 20; // 20px –Ω–∞ –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É
  };

  // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
  report.forEach((r) => {
    const row = sheet.addRow({
      organization: r.name,
      date: r.date ? new Date(r.date).toLocaleString('ru-RU', {
        day: '2-digit',
        month: '2-digit',
        year: '2-digit',
        hour: '2-digit',
        minute: '2-digit',
      }) : '',
      email: r.email,
      contacts: r.contacts,
      status: parseStatus(r.status, r.error),
    });

    // –ê–≤—Ç–æ–ø–µ—Ä–µ–Ω–æ—Å —Ç–µ–∫—Å—Ç–∞
    row.alignment = { wrapText: true, vertical: 'middle' };

    // üü¢ **–ì—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –≤—Å–µ—Ö —è—á–µ–µ–∫ –≤ —Å—Ç—Ä–æ–∫–µ**
    row.eachCell((cell) => {
      cell.border = {
        top: { style: 'thin' },
        left: { style: 'thin' },
        bottom: { style: 'thin' },
        right: { style: 'thin' },
      };
    });

    // üü¢ **–¶–≤–µ—Ç–æ–≤–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ**
    if (r.status === 'FAIL') {
      row.eachCell((cell) => {
        cell.fill = {
          type: 'pattern',
          pattern: 'solid',
          fgColor: { argb: 'FFFFCCCC' }, // –ö—Ä–∞—Å–Ω—ã–π —Ñ–æ–Ω
        };
      });
    } else if (r.status === 'OK') {
      row.eachCell((cell) => {
        cell.fill = {
          type: 'pattern',
          pattern: 'solid',
          fgColor: { argb: 'FFCCFFCC' }, // –ó–µ–ª–µ–Ω—ã–π —Ñ–æ–Ω
        };
      });
    }

    const orgHeight = calculateRowHeight(r.name, 30); // –®–∏—Ä–∏–Ω–∞ '–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è'
    const contactHeight = calculateRowHeight(r.contacts, 30); // –®–∏—Ä–∏–Ω–∞ '–ö–æ–Ω—Ç–∞–∫—Ç—ã'

    // –ë–µ—Ä–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –¥–≤—É—Ö, —á—Ç–æ–±—ã —Å—Ç—Ä–æ–∫–∞ –Ω–µ –æ–±—Ä–µ–∑–∞–ª–∞—Å—å
    row.height = Math.max(orgHeight, contactHeight, 20);
  });

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
  const timestamp = formatDateForFileName();
  const file = path.join(app.getPath('desktop'), `–æ—Ç—á–µ—Ç_—Ä–∞—Å—Å—ã–ª–∫–∏_${timestamp}.xlsx`);

  // –ñ–¥–µ–º, –ø–æ–∫–∞ –∑–∞–ø–∏—à–µ—Ç—Å—è —Ñ–∞–π–ª
  await workbook.xlsx.writeFile(file);

  return file;
}
